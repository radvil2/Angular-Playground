import { Type } from '@angular/core';

interface BaseColumnDef {
  id?: string;
  field: string;
  headerName: string;
}

interface SlotConfig<T = any> {
  id: string;
  idParent?: string;
  topOffsetInMs: number;
  heightInMs: number;
  data: T | null;
  startTime: Date;
  startTimeInMs?: number;
  endTime: Date;
  endTimeInMs?: number;
  totalDataInRange?: number; // total data in range
  position?: number; // position item
  widthItem?: number; // width item
  widthParent?: number; // width parent
  leftItem?: number; // left item
  index?: number; // uniq id
  indexParent?: number; //index parent
  maxInRangeSlots?: number; // maxInRangeSlots
  slotsInRangeFinal?: SlotConfig[]; // array slots in range
  customComponent?: Type<ColumnSlotComponent>;
}

type CssClass = string | string[] | Function;

type CssStyles = { [key: string]: any } | Function;

interface ColumnDef extends BaseColumnDef {
  classNames?: CssClass;
  styles?: CssStyles;
  children?: ColumnDef[];
  // @desc associated time based on timeUnit selected
  timeRanges?: DateTimeRange[] | Function;
  // @desc data associated to each column
  data?: any;
  slots: SlotConfig[];
  isHidden?: boolean;
  index: number;
}

interface DateTimeRange {
  // @desc grid row's start date in unix format
  start: number;
  // @desc grid row's end date in unix format
  end: number;
}

interface ICellClickParams {
  rowIndex: number;
  rowDef: RowDef;
  columnIndex: number;
  // columnDef: ColumnDef;
  time: {
    original: number;
    byOffset: number;
  };
  // @desc whether cell clicked was inside working hour
  isInsideWorkingHour: boolean;
}

type CellClickFunc = (params: ICellClickParams) => void;
type CellDblClickFunc = (params: ICellClickParams) => void;

interface AbstractRowParams {
  rowId: number;
  rowIndex: number;
  time: Date;
}

type IRowCellStyleFormatterParams = AbstractRowParams;
type IRowCellLabelFormatterParams = AbstractRowParams;

type RowCellStyleFormatterFunc = (
  params: IRowCellStyleFormatterParams
) => CssStyles;

type RowCellLabelFormatterFunc = (
  params: IRowCellLabelFormatterParams
) => string;

interface SchedulerGridOptions<T = any> {
  // @desc default locale fallbacks to "en-US"
  locale?: string;
  // @desc locale offset in hour, default to browser tz offset
  timezoneOffset?: number;
  // @desc duration per cell height
  cellDuration?: number;
  // @desc cell duration unit
  // cellDurationUnit?: TimeUnit;
  // @desc cell height in 'px' unit
  cellHeightPerDuration?: number;
  // @desc cell win width, because default value will be flexed to 1
  cellMinWidth?: number;
  // @desc cell assigned css class names, for user's custom styles
  cellCssClass?: CssClass;
  // @desc grid row time range, default to 10
  timeRange?: DateTimeRange;
  // @desc event when cell clicked
  onCellClick?: CellClickFunc;
  // @desc event when cell double clicked
  onCellDblClick?: CellDblClickFunc;
  // @desc column definitions
  // columnDefs?: ColumnDef[];
  colDefs?: any[];
  // @desc each row label style formatter
  rowLabelFormatter?: RowCellLabelFormatterFunc;
  // @desc each row cell style formatter
  rowCellStyleFormatter?: RowCellStyleFormatterFunc;
  // @desc custom component for slot
  slotComponent?: Type<T>;
}

// sidebar cell defination
interface RowDef {
  // @desc unique key, fallback to index, if not provided,
  id?: string;
  // @desc user custom row data, default will be date object generated by timeRange
  time: number;
  // @desc displayed label, default will be formatted from this row's data(default: date)
  label: Function | string;
  // @desc customer user's css classnames, will be appended to the row's DOM element
  classNames?: CssClass;

  isCustomRightClick?: boolean;

  isCustomRightClickOnShow?: boolean;
}

interface ColumnSlotComponent<T = any> {
  // @desc slotIndex by current column
  slotId: string;
  // @desc associated column definition
  // columnDef: ColumnDef;
  // @desc slot duration in unix format
  duration?: number;
  // @desc start time in unix format
  startTime?: number; // TODO: provide this information later
  // @desc end time in unix format
  endTime?: number; // TODO: provide this information later
  // @desc custom data passed
  data: T;
  // @desc layout type for different UI Design
  layoutType?: 'layout-1' | 'layout-2' | 'layout-3' | 'layout-4';
}

interface ColumnRightClickComponent<T = any> {
  // @desc associated column definition
  // columnDef: ColumnDef;
  // @desc row index
  columnIndex?: number;
  // @desc slot duration in unix format
  rowDef?: RowDef;
  // @desc row index
  rowIndex?: number;
  // @desc position x click
  x: number;
  // @desc position y click
  y: number;

  // @desc timezone offset
  timezoneOffsetInMs?: number;
  // @desc flag for working hour
  isInsideWorkingHour?: boolean;
}
